/******************************************************************************
 *
 * mixins that can be used in other scss files
 *
 *****************************************************************************/
@import "config";
//@import "functions";
// styleline:disable no-vendor-prefixes

// retina image
@mixin retina-image(
    $filename,
    $background-size,
    $extension: png,
    $retina-filename: null,
    $retina-suffix: _2x
) {
    background-image: url("#{$filename}.#{$extension}");

    @media only screen and (-webkit-min-device-pixel-ratio: 1.5),
        only screen and (min--moz-device-pixel-ratio: 1.5),
        only screen and (-o-min-device-pixel-ratio: 3/2),
        only screen and (min-resolution: 144dpi),
        only screen and (min-resolution: 1.5dppx) {
        @if $retina-filename {
            background-image: url("#{$retina-filename}.#{$extension}");
        }

        @else {
            background-image: url("#{$filename}#{$retina-suffix}.#{$extension}");
        }
        background-size: $background-size;
    }
}

// Responsive breakpoint manager
// @access public
// @param {String} $breakpoint - Breakpoint
// @requires $breakpoints
@mixin respond-to($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        @media (min-width: #{map-get($breakpoints, $breakpoint)}) {
            @content;
        }
    }

    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`."
            + " Please make sure it is defined in `$breakpoints` map.";
    }
}

// mixin for our default scrollbar. webkit only, because JS solutions suck. gief standard pls.
%scrollbar {
    &::-webkit-scrollbar {
        width: 10px;
        height: 10px;

        background: #373d3f;

        [data-theme="light"] & {
            background: #dadada;
        }
    }

    &::-webkit-scrollbar-track {
        background: transparent;
    }

    &::-webkit-scrollbar-thumb {
        border: 1px solid #000;

        background: linear-gradient(
            to bottom,
            #dadada 0%,
            #6fc3df 50%,
            #dadada 100%
        );
        border-radius: 5px;

        &:active {
            background: linear-gradient(
                to bottom,
                #dadada 0%,
                #df740c 50%,
                #dadada 100%
            );
        }

        &:hover {
            box-shadow: inset 0 0 10px #dadada;
        }
    }
}

/*
 * mixin for dark/light theme
 * creates a internal $theme-map so we can easily access it via t() function
 * originally from Katie McTigue
 * https://medium.com/@katiemctigue/how-to-create-a-dark-mode-in-sass-609f131a3995
 * USAGE:
 * @include themed() {
 *     background: t("g-ebony");
 *     color: t("t-light");
 * }
 */

@mixin themed() {
    @each $theme, $map in $themes {
        [data-theme="#{$theme}"] & {
            $theme-map: () !global;

            @each $key, $submap in $map {
                $value: map-get(map-get($themes, $theme), "#{$key}");
                $theme-map: map-merge(
                    $theme-map,
                    (
                        $key: $value,
                    )
                ) !global;
            }
            @content;
            $theme-map: null !global;
        }
    }
}
